{"version":3,"sources":["constants/Constants.js","components/Header.js","components/Board.js","components/Actions.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UNSOLVABLE_MAIN","UNSOLVABLE_SUB","BOARD_NOT_FILLED_MAIN","BOARD_NOT_FILLED_SUB","INVALID_INPUT_MAIN","INVALID_INPUT_SUB","SUCCESS_MAIN","SUCCESS_SUB","Header","React","Component","Board","props","handleChange","i","j","event","value","target","replace","currentBoxValue","changeBoardValue","handleClick","cells","box","this","board","cellStyle","correct","editable","push","className","key","type","style","isNaN","Math","abs","parseInt","onChange","onClick","disabled","Actions","confirmClear","confirmAlert","customUI","onClose","clearBoard","generateGameConfirmation","difficulty","generateNewBoard","validateBoard","aria-hidden","solveBoard","MainComponent","errorPopUp","main","sub","successConfirmation","Constants","fetchBoard","boardInput","state","originalBoard","Array","fill","map","index","charAt","ind","slice","setState","length","Number","isInteger","checkIfBoardIsNotFilled","solution","filledBoard","flag","findRandomBox","floor","random","loading","emptyCell","findEmptyCell","answer","backTracking","generatedBoard","removedNumbersCount","list","boxes","shuffleArray","removedNumber","difficultyMapping","indx","find3by3Number","rowIndex","columnIndex","newBoard","startRow","startColumn","matrix","checkDuplicationInRow","number","status","toString","checkDuplicationInColumn","checkDuplicationInBlock","forEach","blockNumber","checkIfNumberPossibleInCell","row","column","array","removedRow","removedColumn","assignedNumber","numbers","modifyBoardToDisplay","modifiedBoard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efb23ef1.chunk.js","sourcesContent":["module.exports = {\n    UNSOLVABLE_MAIN: \"Unsolvable\",\n    UNSOLVABLE_SUB : \"This Sudoku is unsolvable!. Clear the board and start over. You got this.\",\n    BOARD_NOT_FILLED_MAIN : \"Sorry\",\n    BOARD_NOT_FILLED_SUB : \"Board is not completely filled, Try after finishing all the cells\",\n    INVALID_INPUT_MAIN : \"Invalid input!!\",\n    INVALID_INPUT_SUB : \"Only numbers can be entered in each box\",\n    SUCCESS_MAIN: \"Congratulations!!\",\n    SUCCESS_SUB : \"Do you want to play another game?\"\n}","import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header>\n        <h1>Sudoku</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.currentBoxValue = \"\";\n  }\n\n  handleChange = (i, j) => (event) => {\n    let value = event.target.value.replace(this.currentBoxValue,\"\")\n    this.props.changeBoardValue(i, j, value);\n  };\n\n  handleClick = (i, j) => (event) => {\n    this.currentBoxValue = event.target.value\n  }\n\n  render() {\n    let cells = [];\n    for (var i = 0; i < 9; i++) {\n      for (var j = 0; j < 9; j++) {\n        let box = this.props.board[i][j]\n        let cellStyle = {}\n        if (!box.correct) cellStyle[\"backgroundColor\"] = \"#f3aa9f\"\n        if (box.editable) cellStyle[\"textShadow\"] = \"0 0 0 #0b00ff\"\n\n        cells.push(\n          <div className=\"cell-div\" key={`${i}${j}`}>\n            <input\n              type=\"text\"\n              className=\"cell\"\n              style={cellStyle}\n              value={isNaN(Math.abs(parseInt(box.value))) ? \"\": Math.abs(parseInt(box.value))}\n              onChange={this.handleChange(i, j)}\n              onClick={this.handleClick(i, j)}\n              disabled = {!box.editable}\n            />\n          </div>\n        );\n      }\n    }\n\n    return <div className=\"board\">{cells}</div>;\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n// import Loader from 'react-loader-spinner'\n\nclass Actions extends React.Component {\n\n  confirmClear = () => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='confirmation-box'>\n            <h1>Are you sure?</h1>\n            <p>Do you want to clear the board? All you entered value will diappear</p>\n            <button className=\"clear-button\" onClick={onClose}>Cancel</button>\n            <button\n              className=\"clear-button\"\n              onClick={() => {\n                this.props.clearBoard();\n                onClose();\n              }}\n            >\n              Clear board\n            </button>\n          </div>\n        );\n      }\n    });\n  }\n\n  generateGameConfirmation = (difficulty) => () => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='confirmation-box'>\n            <h1>Are you sure?</h1>\n            <p>Do you want to start a new game? All progress with the current game will be lost</p>\n            <div className=\"confirmation-button-section\">\n              <button className=\"clear-button\" onClick={onClose}>Cancel</button>\n              <button\n                className=\"clear-button\"\n                onClick={() => {\n                  onClose();\n                  this.generateNewBoard(difficulty);\n                }}\n              >\n                Start new Game\n            </button>\n            </div>\n          </div>\n        );\n      }\n    })\n  }\n\n  generateNewBoard = (difficulty) => {\n    this.props.generateNewBoard(difficulty)\n  }\n\n  render() {\n    return (\n      <div className=\"actions\">\n        <div className=\"generate-div\">\n          <p>Generate: </p>\n          <button className=\"difficulty-button\" onClick={this.generateGameConfirmation(\"Easy\")}>Easy</button>\n          <button className=\"difficulty-button\" onClick={this.generateGameConfirmation(\"Medium\")}>Medium</button>\n          <button className=\"difficulty-button\" onClick={this.generateGameConfirmation(\"Hard\")}>Hard</button>\n          <button className=\"difficulty-button\" onClick={this.generateGameConfirmation(\"Random\")}>Random</button>\n          <button className=\"clear-button\" onClick={this.confirmClear}>Clear</button>\n        </div>\n\n        <div className=\"validate-clear-div\">\n          <button className=\"validate-button\" onClick={this.props.validateBoard}>\n            <i className=\"fas fa-check\"></i>Validate\n          </button>\n          <div className=\"difficulty-indicator-section\">\n            <button className=\"difficulty-value\" disabled>{this.props.difficulty}</button>\n            <button className=\"difficulty-indicator-button\">\n              <i className=\"fa fa-graduation-cap\" aria-hidden=\"true\"></i>Difficulty\n            </button>\n          </div>\n        </div>\n\n        <div className=\"solve-div\">\n          <button className=\"solve-button\" onClick={this.props.solveBoard}>\n            Solve\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Actions;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Board from \"./Board\";\nimport Actions from \"./Actions\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport Constants from \"../constants/Constants\";\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: new Array(9).fill(0).map(() => new Array(9).fill(0)),\n      difficulty: \"Easy\",\n      loading: false\n    };\n    this.originalBoard = new Array(9).fill(0).map(() => new Array(9).fill(0))\n    this.solution = new Array(9).fill(0).map(() => new Array(9).fill(0))\n    this.difficultyMapping = {\n      \"Easy\": 43,\n      \"Medium\": 51,\n      \"Hard\": 56\n    }\n  }\n\n  componentDidMount() {\n    this.generateNewBoard(this.state.difficulty)\n  }\n\n  errorPopUp = (main, sub) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='confirmation-box'>\n            <h1>{main}</h1>\n            <p>{sub}</p>\n            <button className=\"clear-button\" onClick={onClose}>Ok</button>\n          </div>\n        );\n      }\n    });\n  }\n\n  successConfirmation = () => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='confirmation-box'>\n            <h1>{Constants.SUCCESS_MAIN}</h1>\n            <p>{Constants.SUCCESS_SUB}</p>\n            <div className=\"confirmation-button-section\">\n              <button className=\"clear-button\" onClick={onClose}>Cancel</button>\n              <button\n                className=\"clear-button\"\n                onClick={() => {\n                  onClose();\n                  this.generateNewBoard(\"Easy\");\n                }}\n              >\n                Start new Game\n            </button>\n            </div>\n          </div>\n        );\n      }\n    })\n  }\n\n  fetchBoard = (boardInput) => {\n    let board = this.state.board;\n    let originalBoard = new Array(9).fill(0).map(() => new Array(9).fill(0))\n\n    let index = 0;\n    for (var i = 0; i < 9; i++) {\n      for (var j = 0; j < 9; j++) {\n        board[i][j] =\n          boardInput.charAt(index) === \"0\" ? \"\" : boardInput.charAt(index);\n        index += 1;\n      }\n    }\n\n    for (var ind = 0; ind < 9; ind++) originalBoard[ind] = board[ind].slice();\n    this.originalBoard = originalBoard;\n\n    return board;\n  };\n\n  clearBoard = () => {\n    let originalBoard = new Array(9).fill(0).map(() => new Array(9).fill(0))\n    for (var ind = 0; ind < 9; ind++) originalBoard[ind] = this.originalBoard[ind].slice();\n    this.setState({ board: originalBoard })\n  }\n\n  changeBoardValue = (i, j, value) => {\n    value = parseInt(value.slice(value.length - 1))\n    if (Number.isInteger(value) && value > 0) {\n      var board = this.state.board;\n      board[i][j] = value;\n      this.setState({ board: board });\n    } else {\n      this.errorPopUp(Constants.INVALID_INPUT_MAIN, Constants.INVALID_INPUT_SUB)\n    }\n  };\n\n  checkIfBoardIsNotFilled = () => {\n    let board = this.state.board;\n    for (var i = 0; i < 9; i++) {\n      for (var j = 0; j < 9; j++) {\n        if (board[i][j] === \"\") {\n          return true;\n        }\n      }\n    }\n  }\n\n  validateBoard = () => {\n    if (this.checkIfBoardIsNotFilled()) this.errorPopUp(Constants.BOARD_NOT_FILLED_MAIN, Constants.BOARD_NOT_FILLED_SUB)\n    else {\n      var board = this.solution;\n      var filledBoard = this.state.board\n      let flag = false\n\n      for (var i = 0; i < 9; i++) {\n        for (var j = 0; j < 9; j++) {\n          if (filledBoard[i][j] !== board[i][j]) {\n            filledBoard[i][j] = \"-\" + Math.abs(parseInt(filledBoard[i][j]))\n            flag = true\n          }\n        }\n      }\n      if (!flag) {\n        this.successConfirmation()\n      }\n      this.setState({ board: filledBoard })\n    }\n  }\n\n  findRandomBox = () => {\n    const i = Math.floor(Math.random() * 9);\n    const j = Math.floor(Math.random() * 9);\n    return [i, j]\n  }\n\n  generateNewBoard = (difficulty) => {\n    this.setState({ loading: true })\n    // create a solution\n    var board = this.fetchBoard(\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n    var emptyCell = this.findEmptyCell(board);\n    var answer = this.backTracking(emptyCell[0], emptyCell[1], board);\n    this.solution = answer[1]\n\n    let generatedBoard = []\n    for (var ind = 0; ind < 9; ind++) generatedBoard[ind] = answer[1][ind].slice();\n\n    // find random box in the board\n    let removedNumbersCount = 0;\n\n    var list = [];\n    for (var i = 0; i < 9; i++) {\n      for (var j = 0; j < 9; j++) {\n        list.push([i, j]);\n      }\n    }\n    let boxes = this.shuffleArray(list)\n\n    for (let box of boxes) {\n\n      i = box[0]\n      j = box[1]\n\n      // try removing the number in the i,j box\n      let removedNumber = generatedBoard[i][j];\n      generatedBoard[i][j] = \"\"\n      // var emptyBox = this.findEmptyCell(generatedBoard);\n      var result = this.backTracking(i, j, generatedBoard, i, j, removedNumber);\n\n      if (result[1].length === 0) {\n        // can remove this number\n        removedNumbersCount += 1\n      } else generatedBoard[i][j] = removedNumber\n\n      var difficultyCount = difficulty !== \"Random\" ? this.difficultyMapping[difficulty] :\n        Math.floor(Math.random() * (this.difficultyMapping[\"Hard\"] - this.difficultyMapping[\"Easy\"] + 1) + this.difficultyMapping[\"Easy\"]);\n      if (removedNumbersCount === difficultyCount) break;\n\n    }\n    this.setState({ difficulty: difficulty, board: generatedBoard })\n\n    let originalBoard = new Array(9).fill(0).map(() => new Array(9).fill(0))\n    for (var indx = 0; indx < 9; indx++) originalBoard[indx] = generatedBoard[indx].slice();\n    this.originalBoard = originalBoard;\n  }\n\n\n\n  find3by3Number = (rowIndex, columnIndex, board) => {\n    var newBoard = [];\n    for (var ind = 0; ind < 9; ind++) newBoard[ind] = board[ind].slice();\n    var startRow = Math.floor(rowIndex / 3) * 3;\n    var startColumn = Math.floor(columnIndex / 3) * 3;\n    var matrix = [];\n\n    for (var i = startRow; i < startRow + 3; i++) {\n      for (var j = startColumn; j < startColumn + 3; j++) {\n        matrix.push(newBoard[i][j]);\n      }\n    }\n    return matrix;\n  };\n\n  checkDuplicationInRow = (rowIndex, number, board) => {\n    var status = false;\n    for (var j = 0; j < 9; j++) {\n      if (board[rowIndex][j] === number.toString()) {\n        status = true;\n        break;\n      }\n    }\n    return status;\n  };\n\n  checkDuplicationInColumn = (columnIndex, number, board) => {\n    var status = false;\n    for (var i = 0; i < 9; i++) {\n      if (board[i][columnIndex] === number.toString()) {\n        status = true;\n        break;\n      }\n    }\n    return status;\n  };\n\n  checkDuplicationInBlock = (rowIndex, columnIndex, number, board) => {\n    var status = false;\n    var block = this.find3by3Number(rowIndex, columnIndex, board);\n    block.forEach((blockNumber) => {\n      if (blockNumber === number.toString()) {\n        status = true;\n      }\n    });\n    return status;\n  };\n\n  checkIfNumberPossibleInCell = (row, column, number, board) => {\n    if (\n      !this.checkDuplicationInColumn(column, number, board) &&\n      !this.checkDuplicationInRow(row, number, board) &&\n      !this.checkDuplicationInBlock(row, column, number, board)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  findEmptyCell = (board) => {\n    var row = -1;\n    var column = -1;\n    for (var i = 0; i < 9; i++) {\n      for (var j = 0; j < 9; j++) {\n        if (board[i][j] === \"\") {\n          row = i;\n          column = j;\n          break;\n        }\n      }\n      if (row !== -1 || column !== -1) break;\n    }\n    return [row, column];\n  };\n\n  shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  backTracking = (rowIndex, columnIndex, board, removedRow, removedColumn, removedNumber) => {\n    var newBoard = [];\n    var status = [false, []];\n    for (var ind = 0; ind < 9; ind++) newBoard[ind] = board[ind].slice();\n\n    var assignedNumber = 0;\n    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    numbers = this.shuffleArray(numbers)\n\n    for (var i = 0; i < 9; i++) {\n      if (this.checkIfNumberPossibleInCell(rowIndex, columnIndex, numbers[i], newBoard) &&\n        (removedRow !== rowIndex || removedColumn !== columnIndex || parseInt(removedNumber) !== parseInt(numbers[i]))) {\n\n        newBoard[rowIndex][columnIndex] = numbers[i].toString();\n        assignedNumber = numbers[i];\n\n        var emptyCell = this.findEmptyCell(newBoard);\n        if (emptyCell[0] === -1 || emptyCell[1] === -1) {\n          return [true, newBoard];\n        }\n\n        status = this.backTracking(emptyCell[0], emptyCell[1], newBoard, removedRow, removedColumn, removedNumber);\n        if (status[0]) break;\n      }\n    }\n\n    if (assignedNumber === 0) return [false, []];\n    return status;\n  };\n\n  solveBoard = () => {\n    var board = this.originalBoard;\n    var emptyCell = this.findEmptyCell(board);\n    var answer = this.backTracking(emptyCell[0], emptyCell[1], board, -1, -1, 0);\n    if (answer[1].length === 0) {\n      this.errorPopUp(Constants.UNSOLVABLE_MAIN, Constants.UNSOLVABLE_SUB)\n    } else {\n      this.setState({ board: answer[1] });\n    }\n  };\n\n  modifyBoardToDisplay = () => {\n    let board = this.state.board;\n    let originalBoard = this.originalBoard\n    let modifiedBoard = new Array(9).fill(0).map(() => new Array(9).fill(0))\n\n    for (var i = 0; i < 9; i++) {\n      for (var j = 0; j < 9; j++) {\n        modifiedBoard[i][j] = {\n          \"value\":board[i][j],\n          \"editable\": originalBoard[i][j] === \"\",\n          \"correct\" : parseInt(board[i][j]) > 0 || board[i][j] === \"\"\n        }\n      }\n    }\n    return modifiedBoard;\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Header />\n        <Board\n          board={this.modifyBoardToDisplay()}\n          changeBoardValue={(i, j, value) => this.changeBoardValue(i, j, value)}\n        />\n        <Actions\n          solveBoard={this.solveBoard}\n          clearBoard={this.clearBoard}\n          difficulty={this.state.difficulty}\n          generateNewBoard={(difficulty) => this.generateNewBoard(difficulty)}\n          validateBoard={this.validateBoard}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MainComponent;\n","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}